extends layout

block content
    #container

    script(id='gallery', type='text/ractive').
        <div class='slideshow'>
            <a class='prev' proxy-tap='prev'><span>&laquo;</span></a>
            {{#fullsize}}
            <div class='fullsize-image'
             style='background-image: url("{{fullsize}}")' />
            {{/fullsize}}
            <a class='next' proxy-tap='next'><span>&raquo;</span></a>
        </div>

        <div class='thumbnails'>
            {{#images:index}}
            <img id='{{id}}'
             class='{{( selection == index ? "selected" : "unselected" )}}'
             width="100" height="auto"
             proxy-tap='select'
             src='{{thumbnail}}'
             selection='{{index}}'>
            {{/images}}
        </div>

    script(src='javascripts/Ractive.js')

    // Reconstruct data structure from index.js
    script().
         var images = [];
         var nextId = 0;
    for image in images
        script().
            images.push({ id: "image_" + nextId,
                          thumbnail: "#{image.thumbnail}",
                          fullsize: "#{image.fullsize}" });
            nextId += 1;

    script().
        Ractive.prototype.select = function(selection) {
            // Wrap from first picture to last
            if (selection < 0) {
                selection = images.length - 1; 
            }
            // ...and from last picture to first
            else if (selection > (images.length - 1)) {
                selection = 0;
            }

            var oldSelection = this.get('selection');
            if (oldSelection != selection) {
                this.set('selection', selection);
                this.set('fullsize', null, function() {
                    this.set('fullsize', images[selection].fullsize) });
            }

            return selection;
        };

        var ractive = new Ractive({
           el: 'container',
           template: '#gallery',
           data: { images: images,
                   selection: 0,
                   fullsize: images ? images[0].fullsize : undefined }
           });

        // Creates a function that moves selection to some direction
        // with a given offset
        function selectionMover(offset) {
            return function() {
                var selection = ractive.get('selection');
                selection = ractive.select(selection + offset);

                // Make sure the selection is visible
                var el = document.getElementById(images[selection].id);
                el.scrollIntoView(false);
            };
        }

        var moveLeft = selectionMover(-1);
        var moveRight = selectionMover(1);

        // Handle image selection events
        ractive.on({
            select: function(event) {
                var selection = parseInt(event.node.getAttribute('selection'),
                                         10);
                ractive.select(selection);
                },
            next: moveRight,
            prev: moveLeft
        });

        // Left and right keys are mapped for browsing images
        document.onkeydown = function(event) {
            event = event ||Â window.event;

            switch(event.keyCode) {
                case 37: // Left arrow
                moveLeft();
                break;

                case 39: // Right arrow
                moveRight();
                break;
            }
        };
